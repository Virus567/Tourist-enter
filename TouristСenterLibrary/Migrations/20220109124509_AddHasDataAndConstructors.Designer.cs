// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TouristСenterLibrary;

namespace TouristСenterLibrary.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220109124509_AddHasDataAndConstructors")]
    partial class AddHasDataAndConstructors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EquipmentHike", b =>
                {
                    b.Property<int>("EquipmentsListID")
                        .HasColumnType("integer");

                    b.Property<int>("HikesListID")
                        .HasColumnType("integer");

                    b.HasKey("EquipmentsListID", "HikesListID");

                    b.HasIndex("HikesListID");

                    b.ToTable("EquipmentHike");
                });

            modelBuilder.Entity("InstructorInstructorGroup", b =>
                {
                    b.Property<int>("InstructorGroupsID")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorsListID")
                        .HasColumnType("integer");

                    b.HasKey("InstructorGroupsID", "InstructorsListID");

                    b.HasIndex("InstructorsListID");

                    b.ToTable("InstructorInstructorGroup");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.ApplicationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ApplicationType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Семейная"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Корпоративная"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CheckpointRoute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CheckpointRoute");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Title = "Советский р-он, д. Фокино",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 2,
                            Title = "Советский р-он, д. Долбилово",
                            Type = "Финиш"
                        },
                        new
                        {
                            ID = 3,
                            Title = "Нагорский р-он, Летский рейд",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 4,
                            Title = "Белохолуницкий р-он, п.Стеклофилины",
                            Type = "Финиш"
                        },
                        new
                        {
                            ID = 5,
                            Title = "Юрьянский р-он, устье р. Великая",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 6,
                            Title = "Орловский р-он, г. Орлов",
                            Type = "Финиш"
                        },
                        new
                        {
                            ID = 7,
                            Title = "Советский р-он, п. Петропавловское",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 8,
                            Title = "Лебяжский р-он, д. Приверх",
                            Type = "Финиш"
                        },
                        new
                        {
                            ID = 9,
                            Title = "Оричевский р-он, д. Решетники",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 10,
                            Title = "Слободской р-он, д. Бошарово",
                            Type = "Финиш"
                        },
                        new
                        {
                            ID = 11,
                            Title = "г. Нововятск, Набережная",
                            Type = "Старт"
                        },
                        new
                        {
                            ID = 12,
                            Title = "г. Киров, Заречный парк",
                            Type = "Финиш"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChildrenAmount")
                        .HasColumnType("integer");

                    b.Property<string>("ClientTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOfCompany")
                        .HasColumnType("text");

                    b.Property<int>("PeopleAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("CountableEquipment");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Коврик",
                            Number = 150
                        },
                        new
                        {
                            ID = 2,
                            Name = "Спальник",
                            Number = 139
                        },
                        new
                        {
                            ID = 3,
                            Name = "Канистра",
                            Number = 50
                        },
                        new
                        {
                            ID = 4,
                            Name = "Палатка Lair4",
                            Number = 40
                        },
                        new
                        {
                            ID = 5,
                            Name = "Палатка Lair3",
                            Number = 15
                        },
                        new
                        {
                            ID = 6,
                            Name = "Палатка Lair2",
                            Number = 22
                        },
                        new
                        {
                            ID = 7,
                            Name = "Весло",
                            Number = 120
                        },
                        new
                        {
                            ID = 8,
                            Name = "Котелок 10л",
                            Number = 10
                        },
                        new
                        {
                            ID = 9,
                            Name = "Котелок 8л",
                            Number = 9
                        },
                        new
                        {
                            ID = 10,
                            Name = "Костровые стойки",
                            Number = 10
                        },
                        new
                        {
                            ID = 11,
                            Name = "Гермомешок",
                            Number = 142
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableHikeEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CountableEquipmentID")
                        .HasColumnType("integer");

                    b.Property<int>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CountableEquipmentID");

                    b.HasIndex("HikeID");

                    b.ToTable("CountableHikeEquipment");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmployeeTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeTelefonNumber")
                        .IsUnique();

                    b.HasIndex("PassportData")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EmployeeTelefonNumber = "+79532521240",
                            EmploymentDate = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Middlename = "Матвеевич",
                            Name = "Леонид",
                            PassportData = "3316 345677",
                            RoleID = 1,
                            Surname = "Кондрашов"
                        },
                        new
                        {
                            ID = 2,
                            EmployeeTelefonNumber = "+79129750710",
                            EmploymentDate = new DateTime(2020, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Middlename = "Мироновна",
                            Name = "Анастасия",
                            PassportData = "3314 861234",
                            RoleID = 1,
                            Surname = "Шишкина"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Equipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Рафт A",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Рафт D",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Рафт K",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Рафт L",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Рафт M",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Рафт R",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Рафт S",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Рафт X",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Рафт Q",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "raft"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Байдарка2 A",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Байдарка2 B",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Байдарка2 C",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Байдарка2 D",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 15,
                            Name = "Байдарка2 E",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 16,
                            Name = "Байдарка2 F",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 17,
                            Name = "Байдарка2 G",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 18,
                            Name = "Байдарка2 H",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 19,
                            Name = "Байдарка2 I",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 20,
                            Name = "Байдарка2 J",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 21,
                            Name = "Байдарка2 K",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 22,
                            Name = "Байдарка2 L",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 23,
                            Name = "Байдарка2 M",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 24,
                            Name = "Байдарка2 O",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 25,
                            Name = "Байдарка2 P",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 26,
                            Name = "Байдарка2 Q",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 27,
                            Name = "Байдарка2 R",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 28,
                            Name = "Байдарка2 S",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 29,
                            Name = "Байдарка2 T",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 30,
                            Name = "Байдарка2 U",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak2"
                        },
                        new
                        {
                            ID = 31,
                            Name = "Байдарка3 I",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak3"
                        },
                        new
                        {
                            ID = 32,
                            Name = "Байдарка3 J",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak3"
                        },
                        new
                        {
                            ID = 33,
                            Name = "Байдарка3 Q",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak3"
                        },
                        new
                        {
                            ID = 34,
                            Name = "Байдарка3 K",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak3"
                        },
                        new
                        {
                            ID = 35,
                            Name = "Байдарка3 P",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "kayak3"
                        },
                        new
                        {
                            ID = 36,
                            Name = "Беседка A",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "pavilion"
                        },
                        new
                        {
                            ID = 37,
                            Name = "Беседка B",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "pavilion"
                        },
                        new
                        {
                            ID = 38,
                            Name = "Беседка C",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "pavilion"
                        },
                        new
                        {
                            ID = 39,
                            Name = "Беседка D",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "pavilion"
                        },
                        new
                        {
                            ID = 40,
                            Name = "Беседка F",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "pavilion"
                        },
                        new
                        {
                            ID = 41,
                            Name = "Складной стол №1",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 42,
                            Name = "Складной стол №2",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 43,
                            Name = "Складной стол №3",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 44,
                            Name = "Складной стол №4",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 45,
                            Name = "Складной стол №5",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 46,
                            Name = "Складной стол №6",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "table"
                        },
                        new
                        {
                            ID = 47,
                            Name = "Топор H",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ax"
                        },
                        new
                        {
                            ID = 48,
                            Name = "Топор N",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ax"
                        },
                        new
                        {
                            ID = 49,
                            Name = "Топор Q",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ax"
                        },
                        new
                        {
                            ID = 50,
                            Name = "Топор T",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ax"
                        },
                        new
                        {
                            ID = 56,
                            Name = "Топор Y",
                            PurchaseDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "ax"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("RouteID");

                    b.ToTable("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InstructorTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("InstructorTelefonNumber")
                        .IsUnique();

                    b.HasIndex("PassportData")
                        .IsUnique();

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EmploymentDate = new DateTime(2019, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79222106611",
                            Middlename = "Александровна",
                            Name = "Алиса",
                            PassportData = "3314 568475",
                            Surname = "Петрова"
                        },
                        new
                        {
                            ID = 2,
                            EmploymentDate = new DateTime(2020, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79536523958",
                            Middlename = "Арсентьевна",
                            Name = "Екатерина",
                            PassportData = "3315 264512",
                            Surname = "Зуева"
                        },
                        new
                        {
                            ID = 3,
                            EmploymentDate = new DateTime(2021, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79122023227",
                            Middlename = "Михайлович",
                            Name = "Артём",
                            PassportData = "3316 895123",
                            Surname = "Степанов"
                        },
                        new
                        {
                            ID = 4,
                            EmploymentDate = new DateTime(2020, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79128029498",
                            Middlename = "Романович",
                            Name = "Тимофей",
                            PassportData = "3316 564523",
                            Surname = "Горбунов"
                        },
                        new
                        {
                            ID = 5,
                            EmploymentDate = new DateTime(2021, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79123687951",
                            Middlename = "Михайлович",
                            Name = "Даниил",
                            PassportData = "3315 258965",
                            Surname = "Новиков"
                        },
                        new
                        {
                            ID = 6,
                            EmploymentDate = new DateTime(2020, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79225854707",
                            Middlename = "Тимурович",
                            Name = "Фёдор",
                            PassportData = "3316 225485",
                            Surname = "Журавлев"
                        },
                        new
                        {
                            ID = 7,
                            EmploymentDate = new DateTime(2021, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79533402030",
                            Middlename = "Вадимировна",
                            Name = "Ангелина",
                            PassportData = "3314 552314",
                            Surname = "Лазарева"
                        },
                        new
                        {
                            ID = 8,
                            EmploymentDate = new DateTime(2020, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79129717101",
                            Middlename = "Артёмович",
                            Name = "Марк",
                            PassportData = "3315 821423",
                            Surname = "Судаков"
                        },
                        new
                        {
                            ID = 9,
                            EmploymentDate = new DateTime(2021, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79539716504",
                            Middlename = "Константинович",
                            Name = "Евгений",
                            PassportData = "3316 452301",
                            Surname = "Жилин"
                        },
                        new
                        {
                            ID = 10,
                            EmploymentDate = new DateTime(2019, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorTelefonNumber = "+79122433993",
                            Middlename = "Николаевна",
                            Name = "Анна",
                            PassportData = "3317 266312",
                            Surname = "Калугина"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.InstructorGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("HikeID");

                    b.ToTable("InstructorGroup");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplicationTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentFeatures")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FoodlFeatures")
                        .HasColumnType("text");

                    b.Property<int>("HermeticBagAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualTentAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WayToTravel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationTypeID");

                    b.HasIndex("ClientID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HikeID");

                    b.HasIndex("RouteID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("ClientTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PositionName = "admin"
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Route", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CheckpointFinishID")
                        .HasColumnType("integer");

                    b.Property<int>("CheckpointStartID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberDays")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CheckpointFinishID");

                    b.HasIndex("CheckpointStartID");

                    b.ToTable("Route");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CheckpointFinishID = 2,
                            CheckpointStartID = 1,
                            Description = "Красавица река НЕМДА является жемчужиной Вятского края",
                            Name = "Любимая Немда",
                            NumberDays = 3
                        },
                        new
                        {
                            ID = 2,
                            CheckpointFinishID = 4,
                            CheckpointStartID = 3,
                            Description = "Затерянный мир На Вятке",
                            Name = "Затерянный мир",
                            NumberDays = 3
                        },
                        new
                        {
                            ID = 3,
                            CheckpointFinishID = 6,
                            CheckpointStartID = 5,
                            Description = "Великолепный маршрут Родные просторы по берегам реки Вятки",
                            Name = "Родные просторы",
                            NumberDays = 3
                        },
                        new
                        {
                            ID = 4,
                            CheckpointFinishID = 8,
                            CheckpointStartID = 7,
                            Description = "Поющие пески Вятки ",
                            Name = "Поющие пески Вятки",
                            NumberDays = 3
                        },
                        new
                        {
                            ID = 5,
                            CheckpointFinishID = 10,
                            CheckpointStartID = 9,
                            Description = "Очень красивые и живописные места, на очень быстрой и стремительной реке Быстрице",
                            Name = "Быстрая вода",
                            NumberDays = 3
                        },
                        new
                        {
                            ID = 6,
                            CheckpointFinishID = 12,
                            CheckpointStartID = 11,
                            Description = "С воды раскрываются все красоты города Кирова",
                            Name = "Город с воды",
                            NumberDays = 1
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.RouteHike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FinishBusID")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<int?>("StartBusID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FinishBusID");

                    b.HasIndex("HikeID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StartBusID");

                    b.ToTable("RouteHike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Transport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<int>("TransportCompanyID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CarNumber")
                        .IsUnique();

                    b.HasIndex("TransportCompanyID");

                    b.ToTable("Transport");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CarNumber = "У356РА",
                            SeatCount = 40,
                            TransportCompanyID = 2
                        },
                        new
                        {
                            ID = 2,
                            CarNumber = "А215УР",
                            SeatCount = 25,
                            TransportCompanyID = 2
                        },
                        new
                        {
                            ID = 3,
                            CarNumber = "Д563ТА",
                            SeatCount = 50,
                            TransportCompanyID = 1
                        },
                        new
                        {
                            ID = 4,
                            CarNumber = "К921БД",
                            SeatCount = 27,
                            TransportCompanyID = 2
                        },
                        new
                        {
                            ID = 5,
                            CarNumber = "К532СУ",
                            SeatCount = 17,
                            TransportCompanyID = 1
                        },
                        new
                        {
                            ID = 6,
                            CarNumber = "Т532МА",
                            SeatCount = 13,
                            TransportCompanyID = 1
                        });
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.TransportCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CompanyTelefonNumber")
                        .IsUnique();

                    b.ToTable("TransportCompany");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyTelefonNumber = "+79127262438",
                            Name = "Довезем"
                        },
                        new
                        {
                            ID = 2,
                            CompanyTelefonNumber = "+79227126472",
                            Name = "Автокар"
                        });
                });

            modelBuilder.Entity("EquipmentHike", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristСenterLibrary.Entity.Hike", null)
                        .WithMany()
                        .HasForeignKey("HikesListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstructorInstructorGroup", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.InstructorGroup", null)
                        .WithMany()
                        .HasForeignKey("InstructorGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristСenterLibrary.Entity.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableHikeEquipment", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.CountableEquipment", "CountableEquipment")
                        .WithMany()
                        .HasForeignKey("CountableEquipmentID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany("CountableHikeEquipList")
                        .HasForeignKey("HikeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountableEquipment");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Employee", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.InstructorGroup", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Order", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID");

                    b.HasOne("TouristСenterLibrary.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("TouristСenterLibrary.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany("OrdersList")
                        .HasForeignKey("HikeID");

                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("ApplicationType");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Hike");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Participant", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Client", "Client")
                        .WithMany("ParticipantsList")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Route", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.CheckpointRoute", "CheckpointFinish")
                        .WithMany()
                        .HasForeignKey("CheckpointFinishID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristСenterLibrary.Entity.CheckpointRoute", "CheckpointStart")
                        .WithMany()
                        .HasForeignKey("CheckpointStartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckpointFinish");

                    b.Navigation("CheckpointStart");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.RouteHike", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Transport", "FinishBus")
                        .WithMany()
                        .HasForeignKey("FinishBusID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.HasOne("TouristСenterLibrary.Entity.Transport", "StartBus")
                        .WithMany()
                        .HasForeignKey("StartBusID");

                    b.Navigation("FinishBus");

                    b.Navigation("Hike");

                    b.Navigation("Route");

                    b.Navigation("StartBus");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Transport", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.TransportCompany", "TransportCompany")
                        .WithMany()
                        .HasForeignKey("TransportCompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Client", b =>
                {
                    b.Navigation("ParticipantsList");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.Navigation("CountableHikeEquipList");

                    b.Navigation("OrdersList");
                });
#pragma warning restore 612, 618
        }
    }
}
