// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TouristСenterLibrary;

namespace TouristСenterLibrary.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220107085049_AddManyToOneInCLientAndParticipant")]
    partial class AddManyToOneInCLientAndParticipant
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("InstructorInstructorGroup", b =>
                {
                    b.Property<int>("InstructorGroupsID")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorsListID")
                        .HasColumnType("integer");

                    b.HasKey("InstructorGroupsID", "InstructorsListID");

                    b.HasIndex("InstructorsListID");

                    b.ToTable("InstructorInstructorGroup");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.ApplicationType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ApplicationType");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CheckpointRoute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CheckpointRoute");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChildrenAmount")
                        .HasColumnType("integer");

                    b.Property<string>("ClientTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameOfCompany")
                        .HasColumnType("text");

                    b.Property<int>("PeopleAmount")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("CountableEquipment");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableHikeEquip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EquipmentID")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("HikeID");

                    b.ToTable("CountableHikeEquip");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EmployeeTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoleID")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeTelefonNumber")
                        .IsUnique();

                    b.HasIndex("PassportData")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Equipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("RouteID");

                    b.ToTable("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.HikeEquipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EquipmentID")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("HikeID");

                    b.ToTable("HikeEquipment");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.HikeFood", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FoodID")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ShelfLife")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FoodID");

                    b.HasIndex("HikeID");

                    b.ToTable("HikeFood");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InstructorTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("InstructorTelefonNumber")
                        .IsUnique();

                    b.HasIndex("PassportData")
                        .IsUnique();

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.InstructorGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("HikeID");

                    b.ToTable("InstructorGroup");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ApplicationTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<string>("EquipmentFeatures")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FoodlFeatures")
                        .HasColumnType("text");

                    b.Property<int>("HermeticBagAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int>("IndividualTentAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WayToTravel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationTypeID");

                    b.HasIndex("ClientID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HikeID");

                    b.HasIndex("RouteID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Participant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("ClientTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Route", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CheckpointFinishID")
                        .HasColumnType("integer");

                    b.Property<int?>("CheckpointStartID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberDays")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CheckpointFinishID");

                    b.HasIndex("CheckpointStartID");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.RouteHike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("FinishBusID")
                        .HasColumnType("integer");

                    b.Property<int?>("HikeID")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID")
                        .HasColumnType("integer");

                    b.Property<int?>("StartBusID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("FinishBusID");

                    b.HasIndex("HikeID");

                    b.HasIndex("RouteID");

                    b.HasIndex("StartBusID");

                    b.ToTable("RouteHike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Transport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<int?>("TransportCompanyID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CarNumber")
                        .IsUnique();

                    b.HasIndex("TransportCompanyID");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.TransportCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CompanyTelefonNumber")
                        .IsUnique();

                    b.ToTable("TransportCompany");
                });

            modelBuilder.Entity("InstructorInstructorGroup", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.InstructorGroup", null)
                        .WithMany()
                        .HasForeignKey("InstructorGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristСenterLibrary.Entity.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.CountableHikeEquip", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.CountableEquipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.Navigation("Equipment");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Employee", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.HikeEquipment", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.Navigation("Equipment");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.HikeFood", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.Navigation("Food");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.InstructorGroup", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Order", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeID");

                    b.HasOne("TouristСenterLibrary.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("TouristСenterLibrary.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany("OrdersList")
                        .HasForeignKey("HikeID");

                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.Navigation("ApplicationType");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Hike");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Participant", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Route", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.CheckpointRoute", "CheckpointFinish")
                        .WithMany()
                        .HasForeignKey("CheckpointFinishID");

                    b.HasOne("TouristСenterLibrary.Entity.CheckpointRoute", "CheckpointStart")
                        .WithMany()
                        .HasForeignKey("CheckpointStartID");

                    b.Navigation("CheckpointFinish");

                    b.Navigation("CheckpointStart");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.RouteHike", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.Transport", "FinishBus")
                        .WithMany()
                        .HasForeignKey("FinishBusID");

                    b.HasOne("TouristСenterLibrary.Entity.Hike", "Hike")
                        .WithMany()
                        .HasForeignKey("HikeID");

                    b.HasOne("TouristСenterLibrary.Entity.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteID");

                    b.HasOne("TouristСenterLibrary.Entity.Transport", "StartBus")
                        .WithMany()
                        .HasForeignKey("StartBusID");

                    b.Navigation("FinishBus");

                    b.Navigation("Hike");

                    b.Navigation("Route");

                    b.Navigation("StartBus");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Transport", b =>
                {
                    b.HasOne("TouristСenterLibrary.Entity.TransportCompany", "TransportCompany")
                        .WithMany()
                        .HasForeignKey("TransportCompanyID");

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("TouristСenterLibrary.Entity.Hike", b =>
                {
                    b.Navigation("OrdersList");
                });
#pragma warning restore 612, 618
        }
    }
}
